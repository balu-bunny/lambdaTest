AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda project with parent and child functions
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - prod
Resources:
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-storage-${Environment}
      VersioningConfiguration:
        Status: Enabled
  TaskTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-tracking-${Environment}
      AttributeDefinitions:
      - AttributeName: eventId
        AttributeType: S
      KeySchema:
      - AttributeName: eventId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  TaskEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-task-rule-${Environment}
      Description: Rule to trigger parent lambda for task processing
      State: ENABLED
      EventPattern:
        source:
        - custom.task
        detail-type:
        - TaskCreated
      Targets:
      - Arn:
          Fn::GetAtt:
          - ParentLambdaFunction
          - Arn
        Id: ParentLambdaTarget
  ParentLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-parent-${Environment}
      CodeUri: ParentLambdaFunction
      Handler: handler.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Ref: TaskTrackingTable
          CHILD_LAMBDA_ARN:
            Fn::GetAtt:
            - ChildLambdaFunction
            - Arn
          S3_BUCKET:
            Ref: StorageBucket
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TaskTrackingTable
      - S3CrudPolicy:
          BucketName:
            Ref: StorageBucket
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ChildLambdaFunction
    Metadata:
      SamResourceId: ParentLambdaFunction
  ChildLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-child-${Environment}
      CodeUri: ChildLambdaFunction
      Handler: handler.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Ref: TaskTrackingTable
          S3_BUCKET:
            Ref: StorageBucket
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TaskTrackingTable
      - S3CrudPolicy:
          BucketName:
            Ref: StorageBucket
    Metadata:
      SamResourceId: ChildLambdaFunction
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api-${Environment}
      StageName:
        Ref: Environment
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
        AllowOrigin: '''*'''
  ParentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ParentLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/task
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  S3BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: StorageBucket
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value:
      Ref: TaskTrackingTable
