AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda project with parent and child functions

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Resources:
  # S3 Bucket
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-storage-${Environment}'
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Table
  TaskTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-tracking-${Environment}'
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # EventBridge Rule
  TaskEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-task-rule-${Environment}'
      Description: Rule to trigger parent lambda for task processing
      State: ENABLED
      EventPattern:
        source:
          - custom.task
        detail-type:
          - TaskCreated
      Targets:
        - Arn: !GetAtt ParentLambdaFunction.Arn
          Id: ParentLambdaTarget

  # Parent Lambda Function
  ParentLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-parent-${Environment}'
      CodeUri: ../../src/functions/parent_lambda
      Handler: handler.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Events:
        TaskApi:
          Type: Api
          Properties:
            Path: /task
            Method: post
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TaskTrackingTable
          CHILD_LAMBDA_ARN: !GetAtt ChildLambdaFunction.Arn
          S3_BUCKET: !Ref StorageBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTrackingTable
        - S3CrudPolicy:
            BucketName: !Ref StorageBucket
        - LambdaInvokePolicy:
            FunctionName: !Ref ChildLambdaFunction

  # Child Lambda Function
  ChildLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-child-${Environment}'
      CodeUri: ../../src/functions/child_lambda
      Handler: handler.lambda_handler
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TaskTrackingTable
          S3_BUCKET: !Ref StorageBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTrackingTable
        - S3CrudPolicy:
            BucketName: !Ref StorageBucket

  # API Gateway - SAM will create this automatically based on the Function Events

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref StorageBucket
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref TaskTrackingTable
